/**
 * @description       : Practice class
 * @author            : rajendra_singh.nagar@syngenta.com
 * @last modified on  : 07-13-2021
 * @last modified by  : ChangeMeIn@UserSettingsUnder.SFDoc
 * Modifications Log 
 * Ver   Date         Author                              Modification
 * 1.0   06-07-2021   rajendra_singh.nagar@syngenta.com   Initial Version
**/

// Iterate over the stream  of numbers and mark 1st presence and last presence of the number. It will be linear iteration & hence complexity would be n.

// Create two methods to find minimum & maximum index of the value using binary search. Complexity would be logn.

// 1 2 2 2 3

public inherited sharing Class Google_Practice{
    
    public class Node{
        Integer data;
        Node left, right;
        public Node(Integer data){
            this.data = data;
            left = right = null;
        }
    }

    /* 
    #1 Diameter of binary tree
    1. It would be max of left diameter, right diameter and sum of left & right height.
     */
    public static Integer getDiameter(Node root){

    }
}